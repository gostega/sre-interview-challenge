name: sre-challenge
runtime: yaml
description: SRE Interview Challenge - James Tuson
# Import the program's configuration settings.
config:
  errorDocument:
    type: string
    default: error.html
  indexDocument:
    type: string
    default: index.html
  path:
    type: string
    default: ./simplewebsite

# Export the URLs and hostnames of the bucket and distribution.
# And other things we're interested in.
outputs:
  cdnHostname: ${cdn.domainName}
  cdnURL: https://${cdn.domainName}
  originHostname: ${bucket.websiteEndpoint}
  originURL: http://${bucket.websiteEndpoint}
  publicURL: https://${dns_RecordMain.name}
  # lbUrl: http://${lb.loadBalancer.dnsName}
  # altURL: https://${dns_RecordAlt.name}

resources:
  # Create an S3 bucket and configure it as a website.
  bucket:
    properties:
      website:
        errorDocument: ${errorDocument}
        indexDocument: ${indexDocument}
    type: aws:s3:Bucket
  # Use a synced folder to manage the files of the website.
  bucket-folder:
    options:
      dependsOn:
        - ${ownership-controls}
        - ${public-access-block}
    properties:
      acl: public-read
      bucketName: ${bucket.bucket}
      path: ${path}
    type: synced-folder:index:S3BucketFolder
  # Create a CloudFront CDN to distribute and cache the website.
  # Note: Cloudfront can take quite a while to update sometimes. For example the current update is 750 seconds and counting.
  cdn:
    properties:
      aliases:
        - srechallenge.online
      customErrorResponses:
        - errorCode: 404
          responseCode: 404
          responsePagePath: /${errorDocument}
      defaultCacheBehavior:
        allowedMethods:
          - GET
          - HEAD
          - OPTIONS
        cachedMethods:
          - GET
          - HEAD
          - OPTIONS
        compress: true
        defaultTtl: 600
        forwardedValues:
          cookies:
            forward: all
          queryString: true
        maxTtl: 600
        minTtl: 600
        targetOriginId: ${bucket.arn}
        viewerProtocolPolicy: redirect-to-https
      enabled: true
      origins:
        - customOriginConfig:
            httpPort: 80
            httpsPort: 443
            originProtocolPolicy: http-only
            originSslProtocols:
              - TLSv1.2
          domainName: ${bucket.websiteEndpoint}
          originId: ${bucket.arn}
      priceClass: PriceClass_100
      restrictions:
        geoRestriction:
          restrictionType: none
      viewerCertificate:
        acmCertificateArn: ${cert_ApiGatewayCertificate.arn} # https://www.pulumi.com/registry/packages/aws/api-docs/cloudfront/distribution/#acmcertificatearn_yaml
        sslSupportMethod: sni-only # required if acmCertificateArn is used
    type: aws:cloudfront:Distribution
  # Assign ownership controls to the new S3 bucket
  ownership-controls:
    properties:
      bucket: ${bucket.id}
      rule:
        objectOwnership: ObjectWriter
    type: aws:s3:BucketOwnershipControls
  # Configure the public access block for the new S3 bucket
  public-access-block:
    properties:
      blockPublicAcls: false
      bucket: ${bucket.id}
    type: aws:s3:BucketPublicAccessBlock

  ##############################################
  # Public DNS record in Cloudflare
  dns_RecordMain:
    type: cloudflare:Record
    options:
      dependsOn:
        - ${cdn}
    properties:
      zoneId: ${cloudflare_zone_id}
      name: ${public_domain_name}
      value: ${cdn.domainName}
      proxied: true
      ttl: 1
      type: CNAME

  # record for cert validation
  # https://www.pulumi.com/registry/packages/aws/api-docs/acm/certificatevalidation/
  dns_certValidation:
    type: cloudflare:Record
    properties:
      zoneId: ${cloudflare_zone_id}
      name: ${cert_ApiGatewayCertificate.domainValidationOptions[0].resourceRecordName}
      value: ${cert_ApiGatewayCertificate.domainValidationOptions[0].resourceRecordValue}
      type: ${cert_ApiGatewayCertificate.domainValidationOptions[0].resourceRecordType}
      ttl: 60

  # Create a custom provider section https://www.pulumi.com/blog/deploy-to-multiple-regions/
  # https://www.pulumi.com/registry/packages/aws/api-docs/provider/
  # Because cloudfront can only use certificates in us-east-1 [updating CloudFront Distribution (E1JEH6ICLNOYGE): InvalidViewerCertificate: The specified SSL certificate doesn't exist, isn't in us-east-1 region, isn't valid, or doesn't include a valid certificate chain.]
  # I could solve this another way by putting a load balancer or API gateway in front of cloudfront,
  # But I'm short on time.
  awsEast1:
    type: pulumi:providers:aws
    properties:
      region: us-east-1

  ###########################################
  #  A C M   C E R T   V A L I D A T I O N
  ###########################################
  # Create a cert for the custom API gateway domain and validate it via DNS record in cloudflare
  # https://www.pulumi.com/registry/packages/aws/api-docs/acm/certificatevalidation/
  cert_ApiGatewayCertificate:
    type: aws:acm:Certificate
    options:
      provider: ${awsEast1} # Because cloudfront can only use certificates in us-east-1
    properties:
      domainName: ${public_domain_name}
      validationMethod: "DNS"
  cert_ApiGatewayCertificateValidation:
    type: aws:acm:CertificateValidation
    options:
      provider: ${awsEast1} # We need to use the same region as the cert itself [error: 1 error occurred: reading ACM Certificate (arn:aws:acm:us-east-1:820371356608:certificate/1e95e5bc-afa2-49d8-bab0-34c1ffd40455): couldn't find resource]
    properties:
      certificateArn: ${cert_ApiGatewayCertificate.arn}
      validationRecordFqdns:
        - ${dns_certValidation.name}

  ###########################################
  # Alternate ECS based deployment method:
  # I didn't configure autoscaling. More info:  https://www.pulumi.com/docs/guides/crosswalk/aws/autoscaling/
  ###########################################
  # ## https://www.pulumi.com/registry/packages/awsx/api-docs/ecr/repository/
  # repository:
  #   type: awsx:ecr:Repository
  # ## https://www.pulumi.com/registry/packages/awsx/api-docs/ecr/image/
  # image:
  #   type: awsx:ecr:Image
  #   properties:
  #     repositoryUrl: ${repository.url}
  # cluster:
  #   type: aws:ecs:Cluster
  # lb:
  #   type: awsx:lb:ApplicationLoadBalancer
  # service:
  #   type: awsx:ecs:FargateService
  #   properties:
  #     cluster: ${cluster.arn}
  #     assignPublicIp: true
  #     desiredCount: 1
  #     taskDefinitionArgs:
  #       container:
  #         image: ${image.imageUri}
  #         cpu: 512
  #         memory: 128
  #         essential: true
  #         portMappings:
  #           - targetGroup: ${lb.defaultTargetGroup}

  # # Add a dns record to point to the loadbalancer
  # dns_RecordAlt:
  #   type: cloudflare:Record
  #   options:
  #     dependsOn:
  #       - ${lb}
  #   properties:
  #     zoneId: ${cloudflare_zone_id}
  #     name: alternate.${public_domain_name}
  #     value: ${lb.loadBalancer.dnsName}
  #     proxied: true
  #     ttl: 1
  #     type: CNAME

  # Add a DNS record for the betteruptime custom status page
  dns_RecordStatusInternal:
    type: cloudflare:Record
    properties:
      zoneId: ${cloudflare_zone_id}
      name: internal-status.srechallenge.online
      value: statuspage.betteruptime.com
      type: CNAME
      proxied: false
      ttl: 300
